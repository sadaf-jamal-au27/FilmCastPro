name: Build and Deploy to EKS

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'package*.json'
      - 'charts/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: filmcastpro
  ECR_REGISTRY: 008099619893.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-push:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            --push \
            .
      
      - name: Update Helm values with new image tag
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i "s|tag:.*|tag: \"$IMAGE_TAG\"|" charts/filmcastpro/values.yaml
      
      - name: Commit and push updated values
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add charts/filmcastpro/values.yaml
          git commit -m "chore: update image tag to $IMAGE_TAG [skip ci]" || exit 0
          git push

  # Optional: Notify on deployment
  notify:
    name: Notify Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "✅ Deployment successful! ArgoCD will sync automatically."
          else
            echo "❌ Deployment failed!"
            exit 1
          fi

